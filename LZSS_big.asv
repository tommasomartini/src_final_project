%%  Source Coding - Final Project
%   - LZSS Algorithm -
%   Tommaso Martini (108 15 80)

%   "Big" version: made to produce a great amount of data

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   BUGS & "TO-FIX"'s
%   - ...
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

close all;
clear all;
clc;

M = 256;  % alphabet cardinality

file_numbers = 1 : 4;

for file_num = file_numbers
    
    file_num
    
    switch file_num
        case 1
            max_win_span = 10000;
        case 2
            max_win_span = 13000;
        case 3
            max_win_span = 10000;
        case 4
            max_win_span = 13000;
        case 5
            max_win_span = 24000;
        case 6
            max_win_span = 11000;
        case 7
            max_win_span = 38000;
        otherwise
            max_win_span = 20000;
    end
    
    %% Pick a file from the filesystem
    
    file_name_input = strcat('./big_files/', num2str(file_num));
    stored_file_ID = fopen(file_name_input);
    theseq = fread(stored_file_ID, Inf, '*uint8');
    theseq = theseq';
    msg_length = length(theseq);
    fclose(stored_file_ID);
    
    % lengths of the windows
    windows_span = 1000 : 1000 : max_win_span;
    performances = zeros(1, length(windows_span));
    
    for win = 1 : length(windows)
        
        search_window_length = windows_span(win);
        coding_window_length = 1000;
        
        seq = theseq;
        
        %% Encoder
        
        dict_index = 2; % index to span the dictionary
        
        dictionary = [];
        dictionary(1, :) = [0, 0, double(seq(1))];  % first triple
        
        search_index = 1;   % first element of the search window
        coding_index = 2;   % first element of the coding window
        
        end_of_file = false;    % when the end of the file is reached this is turned to TRUE
        
        while ~end_of_file
            
            % Pattern matching
            
            pattern = seq(coding_index : min(msg_length, coding_index + coding_window_length - 1));
            m = length(pattern);
            
            if m == 0   % last symbol of the sequence: encode it with a single symbol (so doing I'm not wasting resources)
                % New row in the dictionary
                dictionary(dict_index, :) = [0, 0, double(seq(end))];
                dict_index = dict_index + 1;
            else
                conti = true;
                tmp_pattern = pattern(1);
                
                longest_match = 0;
                match_position = coding_index;
                
                while conti
                    search_string = [seq(search_index : coding_index - 1), tmp_pattern(1 : end - 1)];   % the search_string is made by search_window and coding_window
                    match_positions = strfind(search_string, tmp_pattern);
                    if ~isempty(match_positions)    % some matches found: search again
                        longest_match = length(tmp_pattern);
                        match_position = search_index + match_positions(1) - 1;
                        if length(tmp_pattern) < length(pattern)
                            tmp_pattern = pattern(1 : length(tmp_pattern) + 1);
                        else    % I have used the whole pattern
                            conti = false;
                        end
                    else    % no matches found: stop the cycle
                        conti = false;
                    end
                end
                
                offset = coding_index - match_position;
                
                if offset == 0  % no matches: encode a symbol
                    dictionary(dict_index, :) = [0, 0, double(seq(coding_index))];
                else    % match: encode a pair
                    dictionary(dict_index, :) = [1, offset, longest_match];
                end
                
                % New row in the dictionary
                dict_index = dict_index + 1;
            end
            
            % Update indeces to scan the file
            if longest_match == 0   %no matches: go ahead of 1
                coding_index = coding_index + 1;
            else    % match: go ahead of longest_match
                coding_index = coding_index + longest_match;
            end
            search_index = max(coding_index - search_window_length, 1); % you cannot start from the char before the first one
            
            if coding_index > length(seq)
                end_of_file = true;
            end
        end
        
        %% Dictionary compression
        
        % How many bytes do I need to encode each parameter?
        offset_size = ceil(ceil(log2(search_window_length)) / 8);
        length_size = ceil(ceil(log2(search_window_length + coding_window_length)) / 8);
        symbol_size = ceil(ceil(log2(M)) / 8);
        
        cod_file_ID = fopen(dictionary_output, 'w');
        
        cod_sequence = [];
        for dict_row = 1 : size(dictionary, 1)
            
            if mod(dict_row - 1, 8) == 0
                indeces_octave = dictionary(dict_row : min(dict_row + 8 - 1, size(dictionary, 1)), 1);
                indeces_octave = indeces_octave';
                if size(dictionary, 1) - dict_row + 1 < 8
                    indeces_octave = [indeces_octave, zeros(1, 8 - (size(dictionary, 1) - dict_row + 1))];
                end
                indeces_byte = uint8(bi2de(indeces_octave));
                cod_sequence = [cod_sequence, indeces_byte(1)];
            end
            
            if dictionary(dict_row, 1) == 0     % encode a symbol
                symbol64 = uint64(dictionary(dict_row, 3));
                symbol8 = typecast(symbol64, 'uint8');
                symbol_bytes = symbol8(1 : symbol_size);
                cod_sequence = [cod_sequence, symbol_bytes];
            else    % encode a pair
                offset64 = uint64(dictionary(dict_row, 2));
                offset8 = typecast(offset64, 'uint8');
                offset_bytes = offset8(1 : offset_size);
                
                length64 = uint64(dictionary(dict_row, 3));
                length8 = typecast(length64, 'uint8');
                length_bytes = length8(1 : length_size);
                
                cod_sequence = [cod_sequence, [offset_bytes, length_bytes]];
            end
        end
        
        %% Performances analysis
        comp_msg_size = length(cod_sequence);
        original_msg_size = msg_length;
        compression_ratio = round(comp_msg_size * 100 / original_msg_size);
        if verbose_mode
            fprintf('Compression: %d %%', compression_ratio);
        end
        perform(win) = compression_ratio;
    end
end