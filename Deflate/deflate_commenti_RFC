Deflate (http://tools.ietf.org/html/rfc1951#page-6)

LZ77 ha una seraching window di 32.000 bytes

Un blocco di dati compressi corrisp[onde ad un blocco di input. Le dimensioni dei blocchi sono arbitrarie, ma blocchi NON comprimibili sono limitati a 65535 bytes.

Ogni blocco e' compresso usando LZ77.

Ho un Huffman tree per ogni blocco, indipendemente dagli altri (precedenti e successivi blocchi di input)

Ogni blocco consiste di due parti: coppia di Huffman trees che descrivono una parte di dati compressi e LA parte di dati compressi. Gli stessi alberi di Huffman sono compressi usando Huffman.

Dati compressi: serie di elementi di due tipi.
1) literal bytes (cioe' i caratteri che sono codificati singolarmente e che non sono stati trovati nei 32Kbytes precedenti)
2) puntatori a stringhe duplicate, formati in questo modo: <lunghezza del match, distanza backward>

distanza massima 32Kbytes, lunghezza massima 258 bytes. Non ci sono limiti per la dimensione di un blocco, eccetto per i blocchi non comprimibili (<= 65535 bytes)

Ogni tipo di valore (literals, lunghesse e distanze) e' rappresentato con Huffman nella parte dei dati compressa.

Uso un Huffman tree per literals e lunghezze e un'altro per le distanze.

I code trees per ogni blocco appaiono in forma compressa PRIMA i dati compressi di ogni blocco.

Bytes: most significant bit a sinistra

Se uso piu' byte il most significant byte e' quello a destra! 520 si scrive:
1000001000 -> 0000 0010 - 0000 1000
Lo rappresento come
0000 1000 - 0000 0010

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
3.1.1. Packing into bytes

         This document does not address the issue of the order in which
         bits of a byte are transmitted on a bit-sequential medium,
         since the final data format described here is byte- rather than



Deutsch                      Informational                      [Page 5]

 
RFC 1951      DEFLATE Compressed Data Format Specification      May 1996


         bit-oriented.  However, we describe the compressed block format
         in below, as a sequence of data elements of various bit
         lengths, not a sequence of bytes.  We must therefore specify
         how to pack these data elements into bytes to form the final
         compressed byte sequence:

             * Data elements are packed into bytes in order of
               increasing bit number within the byte, i.e., starting
               with the least-significant bit of the byte.
             * Data elements other than Huffman codes are packed
               starting with the least-significant bit of the data
               element.
             * Huffman codes are packed starting with the most-
               significant bit of the code.

         In other words, if one were to print out the compressed data as
         a sequence of bytes, starting with the first byte at the
         *right* margin and proceeding to the *left*, with the most-
         significant bit of each byte on the left as usual, one would be
         able to parse the result from right to left, with fixed-width
         elements in the correct MSB-to-LSB order and Huffman codes in
         bit-reversed order (i.e., with the first bit of the code in the
         relative LSB position).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


Huffman: dato un alfabeto con frequenze di simboli note, Huffman permette la costruzione di un codice ottimo. 

I codici di Huffman usati per ogni alfabeto nel deflate devono avere due regole:
1) i codici di una data lunghezza in bit devono avere ordine lessicografico (i simboli che rappresentano)
2) parole di codice piu' corte precedono (lessicograficamente) parole di codice piu' lunghe.

Se Huffman rispetta queste regole posso rappresentare il codice fornendo solo le lunghezze in bit di ogni parola di codice in ordine secondo l'alfabeto (lunghezza di A, lunghezza di B, lunghezza di C...). Ad esempio:
A 10
B 0
C 110
D 111
lo codifico come (2, 1, 3, 3)

L'algoritmo descritto genera i codici come interi, da leggersi dal piu' al meno significativo dei bit.

bl_count[N] = numero di parole di codice di lunghezza N (N>=1)

per ogni lunghezza di parola di codice trova il valore numerico minimo.

assegna un valore numerico ad ogni parola di codice. Assegna valori cosecutivi a parole co la stess alunghezza in bit. Parole non utilizzate non devono avere un valore assegnatro.

-- non ho capito il secondo punto dell'esempio



Ogni blocco di dati compresso inizia con 3 bit di header, che contengono le seguenti info (i bit di header non iniziano necessariamente sul bordo di un byte: un blocco potrebbe non occupare un numero intero di byte!!):
1) 1bit -> BFINAL (settato solo se questo e' l'ultimo blocco dell'insieme di dati)

2) 2bit -> BTYPE (specifica come i dati sono compressi)
00 no compression
01 fixed Huffman codes
10 dynamic Huffman codes
11 riservato

Decodign algorthm:
leggi l'header del block
se e' decodificato con dynaic Huffman:
leggi la rappresentazione del dizionario
leggi il liuteral/length value dallo stream.
se value < 256 e' un literal
se value = 256 end of block e termina
se value > 256 (fino a 258) decodifica la distanza e decodifica secondo LZ77


Potrei anche riferirmi ad una string ain un blocco precedente.

NON COMPRESSED BLOCK	
LEN: numero di byte di dati del blocco
NLEN complemento a uno di LEN
byte grezzi di dati

BLOCCHI COMPRESSI
BLocchi di dati codificati sono fatti di sequenze di simboli idealmente presi da tre alfabeti: literal bytes (valori 0...255), coppie <lunghezza, backward distanza> (lunghezza e; presa da 3...258 e la distanza 1...32,768). Alfabeti di literals e lunghezze sono fusi in un unico alfabeto (0...258): (0...255) sono literals, 256 e' end of block e (257...285) da' la lunghezza (extra bit per specificare meglio seguono il codice del simbolo).

VEDI TABELLE



COMPRESSIONE CON FIXED HUFFMAN CODES (btype 01)
Codici di Huffman fissati e non specificati nei dati. 

codici fissati. Le distanze 0-31 sono rappresentati con sequenze fisse di 5 bit. Posso usare gli eventuali extrta bit



COMPRESSIONE CON FIXED HUFFMAN CODES (btype 10)
I codici di Huffman dei due alfabeti appaiono nel blocco subito dopo i 3 bit di header e prima dei dati compressi. Prima i codici (literals/lunghezze) e poi i codici per le distanze. Scrivo ogni codice come una sequenza di distanze. Le sequenze dei codici sono a loro volta compresse con Huffman.

Alfabeto per le lunghezze:
0-15: lunghezze da 0-15
16: copia la lunghezza della parola precedente per 3-6 volte (i successivi due bit indicano di quanto copiare)
17: ripeti una lunghezza di codice di 0 per 3-10 volte (3 bit di lunghezza per indicarlo)
18: ripeti una lunghezza di codice di zero per 11-138 volte (necessari 7 bit)


Lunghezza di parola di zero significa chwe quella parola di codice non compare. Se uso solo una distanza di codice la codifico usando un bit.


Formato dei blocchi:
HLIT (5 bit): (numero di literal/length codes - 257) (rappresento i valori da 257 a 286)
HDIST (5 bit): (numero di parole di codice per la distanza - 1) (rappresento i valori da 1 a 32)
HCLEN (4 bit): (numero di parole di codice per la distanza - 4) (valori da 4 a 19)

(HCLEN + 4) x 3 bit: lunghezze delle parole di codice per l'alfabeto di paroel di codice. Ordine strano: 16, 17, 18, 0, ...
Le lunghezze dei codici sono interpretate come interi da 3 bit. Codice di lunghezza zero significa: parola non utilizzata.

HLIT + 257: lunghezze delle parole per literal/length, codificato usando il code length Huffman code

HDIST + 1: lunghezze delle parole per distance, codificato usando il code length Huffman code

Actual compressed data of the block. COdificato usando la codifica di Huffman per literal/length e distanze.

Ultimo simbolo 256 (fine del blocco) codificato con Huffman




